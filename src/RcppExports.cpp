// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calcNprime
IntegerMatrix calcNprime(DataFrame capsdf, DataFrame missdf, DataFrame sitedf);
RcppExport SEXP _cesr_calcNprime(SEXP capsdfSEXP, SEXP missdfSEXP, SEXP sitedfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type capsdf(capsdfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type missdf(missdfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type sitedf(sitedfSEXP);
    rcpp_result_gen = Rcpp::wrap(calcNprime(capsdf, missdf, sitedf));
    return rcpp_result_gen;
END_RCPP
}
// createCH
StringVector createCH(IntegerMatrix caps, IntegerMatrix cov);
RcppExport SEXP _cesr_createCH(SEXP capsSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type caps(capsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(createCH(caps, cov));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cesr_calcNprime", (DL_FUNC) &_cesr_calcNprime, 3},
    {"_cesr_createCH", (DL_FUNC) &_cesr_createCH, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cesr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
